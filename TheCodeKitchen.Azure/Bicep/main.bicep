resource cae_the_code_kitchen 'Microsoft.App/managedEnvironments@2025-02-02-preview' = {
  name: 'cae-the-code-kitchen'
  location: 'West Europe'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    appLogsConfiguration: {
      destination: 'log-analytics'
      logAnalyticsConfiguration: {
        customerId: 'a1f1c37a-6e2b-4b78-b846-4f15ebcfcae6'
        dynamicJsonColumns: false
      }
    }
    zoneRedundant: false
    kedaConfiguration: {}
    daprConfiguration: {}
    customDomainConfiguration: {}
    workloadProfiles: [
      {
        workloadProfileType: 'Consumption'
        name: 'Consumption'
        enableFips: false
      }
    ]
    peerAuthentication: {
      mtls: {
        enabled: false
      }
    }
    peerTrafficConfiguration: {
      encryption: {
        enabled: false
      }
    }
    publicNetworkAccess: 'Enabled'
  }
}

resource crthecodekitchen 'Microsoft.ContainerRegistry/registries@2025-05-01-preview' = {
  name: 'crthecodekitchen'
  location: 'westeurope'
  sku: {
    name: 'Basic'
    tier: 'Basic'
  }
  properties: {
    adminUserEnabled: true
    policies: {
      quarantinePolicy: {
        status: 'disabled'
      }
      trustPolicy: {
        type: 'Notary'
        status: 'disabled'
      }
      retentionPolicy: {
        days: 7
        status: 'disabled'
      }
      exportPolicy: {
        status: 'enabled'
      }
      azureADAuthenticationAsArmPolicy: {
        status: 'enabled'
      }
      softDeletePolicy: {
        retentionDays: 7
        status: 'disabled'
      }
    }
    encryption: {
      status: 'disabled'
    }
    dataEndpointEnabled: false
    publicNetworkAccess: 'Enabled'
    networkRuleBypassOptions: 'AzureServices'
    networkRuleBypassAllowedForTasks: false
    zoneRedundancy: 'Disabled'
    anonymousPullEnabled: false
    metadataSearch: 'Disabled'
    roleAssignmentMode: 'LegacyRegistryPermissions'
    autoGeneratedDomainNameLabelScope: 'Unsecure'
  }
}

resource evhns_the_code_kitchen 'Microsoft.EventHub/namespaces@2024-05-01-preview' = {
  name: 'evhns-the-code-kitchen'
  location: 'westeurope'
  sku: {
    name: 'Basic'
    tier: 'Basic'
    capacity: 1
  }
  properties: {
    geoDataReplication: {
      maxReplicationLagDurationInSeconds: 0
      locations: [
        {
          locationName: 'westeurope'
          roleType: 'Primary'
        }
      ]
    }
    minimumTlsVersion: '1.2'
    publicNetworkAccess: 'Enabled'
    disableLocalAuth: false
    zoneRedundant: true
    isAutoInflateEnabled: false
    maximumThroughputUnits: 0
    kafkaEnabled: true
  }
}

resource sigr_the_code_kitchen 'Microsoft.SignalRService/SignalR@2025-01-01-preview' = {
  name: 'sigr-the-code-kitchen'
  location: 'westeurope'
  sku: {
    name: 'Free_F1'
    tier: 'Free'
    size: 'F1'
    capacity: 1
  }
  kind: 'SignalR'
  properties: {
    tls: {
      clientCertEnabled: false
    }
    features: [
      {
        flag: 'ServiceMode'
        value: 'Default'
        properties: {}
      }
      {
        flag: 'EnableConnectivityLogs'
        value: 'True'
        properties: {}
      }
      {
        flag: 'EnableMessagingLogs'
        value: 'False'
        properties: {}
      }
      {
        flag: 'EnableLiveTrace'
        value: 'False'
        properties: {}
      }
    ]
    liveTraceConfiguration: {
      enabled: 'true'
      categories: [
        {
          name: 'ConnectivityLogs'
          enabled: 'true'
        }
        {
          name: 'MessagingLogs'
          enabled: 'false'
        }
        {
          name: 'HttpRequestLogs'
          enabled: 'false'
        }
      ]
    }
    cors: {
      allowedOrigins: [
        '*'
      ]
    }
    serverless: {
      connectionTimeoutInSeconds: 30
      keepAliveIntervalInSeconds: 15
    }
    upstream: {}
    networkACLs: {
      defaultAction: 'Deny'
      publicNetwork: {
        allow: [
          'ServerConnection'
          'ClientConnection'
          'RESTAPI'
          'Trace'
        ]
      }
      privateEndpoints: []
      ipRules: [
        {
          value: '0.0.0.0/0'
          action: 'Allow'
        }
        {
          value: '::/0'
          action: 'Allow'
        }
      ]
    }
    applicationFirewall: {
      clientConnectionCountRules: []
      clientTrafficControlRules: []
    }
    publicNetworkAccess: 'Enabled'
    disableLocalAuth: false
    disableAadAuth: false
    regionEndpointEnabled: 'Enabled'
    resourceStopped: 'false'
  }
}

resource stthecodekitchen 'Microsoft.Storage/storageAccounts@2025-01-01' = {
  name: 'stthecodekitchen'
  location: 'westeurope'
  sku: {
    name: 'Standard_LRS'
    tier: 'Standard'
  }
  kind: 'StorageV2'
  properties: {
    dnsEndpointType: 'Standard'
    defaultToOAuthAuthentication: false
    publicNetworkAccess: 'Enabled'
    allowCrossTenantReplication: false
    minimumTlsVersion: 'TLS1_2'
    allowBlobPublicAccess: false
    allowSharedKeyAccess: true
    largeFileSharesState: 'Enabled'
    networkAcls: {
      resourceAccessRules: []
      bypass: 'AzureServices'
      virtualNetworkRules: []
      ipRules: []
      defaultAction: 'Allow'
    }
    supportsHttpsTrafficOnly: true
    encryption: {
      requireInfrastructureEncryption: false
      services: {
        file: {
          keyType: 'Account'
          enabled: true
        }
        blob: {
          keyType: 'Account'
          enabled: true
        }
      }
      keySource: 'Microsoft.Storage'
    }
    accessTier: 'Hot'
  }
}

resource ca_tck_cook_api 'Microsoft.App/containerapps@2025-02-02-preview' = {
  name: 'ca-tck-cook-api'
  location: 'West Europe'
  kind: 'containerapps'
  identity: {
    type: 'None'
  }
  properties: {
    managedEnvironmentId: cae_the_code_kitchen.id
    environmentId: cae_the_code_kitchen.id
    workloadProfileName: 'Consumption'
    configuration: {
      secrets: [
        {
          name: 'connection-strings--event-hub-namespace'
        }
        {
          name: 'connections-strings--azure-signal-r'
        }
        {
          name: 'connection-strings--azure-storage'
        }
      ]
      activeRevisionsMode: 'Single'
      ingress: {
        external: true
        targetPort: 8080
        exposedPort: 0
        transport: 'Auto'
        traffic: [
          {
            weight: 100
            latestRevision: true
          }
        ]
        allowInsecure: false
        clientCertificateMode: 'Ignore'
        stickySessions: {
          affinity: 'none'
        }
      }
      registries: [
        {
          server: 'crthecodekitchen.azurecr.io'
          identity: 'system-environment'
        }
      ]
      identitySettings: []
      maxInactiveRevisions: 100
    }
    template: {
      containers: [
        {
          image: 'crthecodekitchen.azurecr.io/ca-tck-cook-api:138'
          imageType: 'ContainerImage'
          name: 'ca-tck-cook-api'
          env: [
            {
              name: 'ConnectionStrings__AzureStorage'
              secretRef: 'connection-strings--azure-storage'
            }
            {
              name: 'ConnectionStrings__AzureSignalR'
              secretRef: 'connections-strings--azure-signal-r'
            }
            {
              name: 'ConnectionStrings__EventHubNamespace'
              secretRef: 'connection-strings--event-hub-namespace'
            }
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
          probes: [
            {
              type: 'Liveness'
              httpGet: {
                path: '/health/live'
                port: 8080
                scheme: 'HTTP'
              }
              periodSeconds: 10
            }
            {
              type: 'Readiness'
              httpGet: {
                path: '/health/ready'
                port: 8080
                scheme: 'HTTP'
              }
              periodSeconds: 10
            }
          ]
        }
      ]
      scale: {
        minReplicas: 0
        maxReplicas: 5
        cooldownPeriod: 300
        pollingInterval: 30
        rules: [
          {
            name: 'cpu-scaler'
            custom: {
              type: 'cpu'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'memory-scaler'
            custom: {
              type: 'memory'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'http-scaler'
            http: {
              metadata: {
                concurrentRequests: '15'
              }
            }
          }
        ]
      }
      volumes: []
    }
  }
}

resource ca_tck_management_api 'Microsoft.App/containerapps@2025-02-02-preview' = {
  name: 'ca-tck-management-api'
  location: 'West Europe'
  kind: 'containerapps'
  identity: {
    type: 'None'
  }
  properties: {
    managedEnvironmentId: cae_the_code_kitchen.id
    environmentId: cae_the_code_kitchen.id
    workloadProfileName: 'Consumption'
    configuration: {
      secrets: [
        {
          name: 'connection-strings--event-hub-namespace'
        }
        {
          name: 'connection-strings--azure-signal-r'
        }
        {
          name: 'connection-strings--azure-storage'
        }
      ]
      activeRevisionsMode: 'Single'
      ingress: {
        external: true
        targetPort: 8080
        exposedPort: 0
        transport: 'Auto'
        traffic: [
          {
            weight: 100
            latestRevision: true
          }
        ]
        allowInsecure: false
        clientCertificateMode: 'Ignore'
        stickySessions: {
          affinity: 'none'
        }
      }
      registries: [
        {
          server: 'crthecodekitchen.azurecr.io'
          identity: 'system-environment'
        }
      ]
      identitySettings: []
      maxInactiveRevisions: 100
    }
    template: {
      containers: [
        {
          image: 'crthecodekitchen.azurecr.io/ca-tck-management-api:138'
          imageType: 'ContainerImage'
          name: 'ca-tck-management-api'
          env: [
            {
              name: 'ConnectionStrings__AzureStorage'
              secretRef: 'connection-strings--azure-storage'
            }
            {
              name: 'ConnectionStrings__AzureSignalR'
              secretRef: 'connection-strings--azure-signal-r'
            }
            {
              name: 'ConnectionStrings__EventHubNamespace'
              secretRef: 'connection-strings--event-hub-namespace'
            }
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
          probes: [
            {
              type: 'Liveness'
              httpGet: {
                path: '/health/live'
                port: 8080
                scheme: 'HTTP'
              }
              periodSeconds: 10
            }
            {
              type: 'Readiness'
              httpGet: {
                path: '/health/ready'
                port: 8080
                scheme: 'HTTP'
              }
              periodSeconds: 10
            }
          ]
        }
      ]
      scale: {
        minReplicas: 0
        maxReplicas: 5
        cooldownPeriod: 300
        pollingInterval: 30
        rules: [
          {
            name: 'cpu-scaler'
            custom: {
              type: 'cpu'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'memory-scaler'
            custom: {
              type: 'memory'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'http-scaler'
            http: {
              metadata: {
                concurrentRequests: '10'
              }
            }
          }
        ]
      }
      volumes: []
    }
  }
}

resource ca_tck_management_ui 'Microsoft.App/containerapps@2025-02-02-preview' = {
  name: 'ca-tck-management-ui'
  location: 'West Europe'
  kind: 'containerapps'
  identity: {
    type: 'None'
  }
  properties: {
    managedEnvironmentId: cae_the_code_kitchen.id
    environmentId: cae_the_code_kitchen.id
    workloadProfileName: 'Consumption'
    configuration: {
      secrets: [
        {
          name: 'connection-strings--azure-signal-r'
        }
        {
          name: 'connection-strings--azure-storage'
        }
        {
          name: 'connection-strings--event-hub-namespace'
        }
      ]
      activeRevisionsMode: 'Single'
      ingress: {
        external: true
        targetPort: 8080
        exposedPort: 0
        transport: 'Auto'
        traffic: [
          {
            weight: 100
            latestRevision: true
          }
        ]
        allowInsecure: false
        clientCertificateMode: 'Ignore'
        stickySessions: {
          affinity: 'none'
        }
      }
      registries: [
        {
          server: 'crthecodekitchen.azurecr.io'
          identity: 'system-environment'
        }
      ]
      identitySettings: []
      maxInactiveRevisions: 100
    }
    template: {
      containers: [
        {
          image: 'crthecodekitchen.azurecr.io/ca-tck-management-ui:138'
          imageType: 'ContainerImage'
          name: 'ca-tck-management-ui'
          env: [
            {
              name: 'ConnectionStrings__AzureStorage'
              secretRef: 'connection-strings--azure-storage'
            }
            {
              name: 'ConnectionStrings__AzureSignalR'
              secretRef: 'connection-strings--azure-signal-r'
            }
            {
              name: 'ConnectionStrings__EventHubNamespace'
              secretRef: 'connection-strings--event-hub-namespace'
            }
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
          probes: [
            {
              type: 'Liveness'
              httpGet: {
                path: '/health/live'
                port: 8080
                scheme: 'HTTP'
              }
              periodSeconds: 10
            }
            {
              type: 'Readiness'
              httpGet: {
                path: '/health/ready'
                port: 8080
                scheme: 'HTTP'
              }
              periodSeconds: 10
            }
          ]
        }
      ]
      scale: {
        minReplicas: 0
        maxReplicas: 5
        cooldownPeriod: 300
        pollingInterval: 30
        rules: [
          {
            name: 'memory-scaler'
            custom: {
              type: 'memory'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'cpu-scaler'
            custom: {
              type: 'cpu'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'http-scaler'
            http: {
              metadata: {
                concurrentRequests: '10'
              }
            }
          }
        ]
      }
      volumes: []
    }
  }
}

resource ca_tck_orleans_scaler 'Microsoft.App/containerapps@2025-02-02-preview' = {
  name: 'ca-tck-orleans-scaler'
  location: 'West Europe'
  kind: 'containerapps'
  identity: {
    type: 'None'
  }
  properties: {
    managedEnvironmentId: cae_the_code_kitchen.id
    environmentId: cae_the_code_kitchen.id
    workloadProfileName: 'Consumption'
    configuration: {
      secrets: [
        {
          name: 'connection-strings--azure-storage'
        }
        {
          name: 'connection-strings--event-hub-namespace'
        }
      ]
      activeRevisionsMode: 'Single'
      ingress: {
        external: false
        targetPort: 8080
        exposedPort: 0
        transport: 'Http2'
        traffic: [
          {
            weight: 100
            latestRevision: true
          }
        ]
        allowInsecure: true
        clientCertificateMode: 'Ignore'
        stickySessions: {
          affinity: 'none'
        }
      }
      registries: [
        {
          server: 'crthecodekitchen.azurecr.io'
          identity: 'system-environment'
        }
      ]
      identitySettings: []
      runtime: {
        dotnet: {
          autoConfigureDataProtection: false
        }
      }
      maxInactiveRevisions: 100
    }
    template: {
      containers: [
        {
          image: 'crthecodekitchen.azurecr.io/ca-tck-orleans-scaler:138'
          imageType: 'ContainerImage'
          name: 'ca-tck-orleans-scaler'
          env: [
            {
              name: 'ConnectionStrings__EventHubNamespace'
              secretRef: 'connection-strings--event-hub-namespace'
            }
            {
              name: 'ConnectionStrings__AzureStorage'
              secretRef: 'connection-strings--azure-storage'
            }
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
          probes: []
        }
      ]
      scale: {
        minReplicas: 0
        maxReplicas: 2
        cooldownPeriod: 300
        pollingInterval: 30
        rules: [
          {
            name: 'cpu-scaler'
            custom: {
              type: 'cpu'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'memory-scaler'
            custom: {
              type: 'memory'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'http-scaler'
            http: {
              metadata: {
                concurrentRequests: '30'
              }
            }
          }
        ]
      }
      volumes: []
    }
  }
}

resource ca_tck_orleans_silo 'Microsoft.App/containerapps@2025-02-02-preview' = {
  name: 'ca-tck-orleans-silo'
  location: 'West Europe'
  kind: 'containerapps'
  identity: {
    type: 'None'
  }
  properties: {
    managedEnvironmentId: cae_the_code_kitchen.id
    environmentId: cae_the_code_kitchen.id
    workloadProfileName: 'Consumption'
    configuration: {
      secrets: [
        {
          name: 'connection-strings--azure-storage'
        }
        {
          name: 'connection-strings--event-hub-namespace'
        }
        {
          name: 'connection-strings--azure-signal-r'
        }
      ]
      activeRevisionsMode: 'Single'
      ingress: {
        external: true
        targetPort: 8080
        exposedPort: 0
        transport: 'Auto'
        traffic: [
          {
            weight: 100
            latestRevision: true
          }
        ]
        allowInsecure: false
        clientCertificateMode: 'Ignore'
        stickySessions: {
          affinity: 'none'
        }
      }
      registries: [
        {
          server: 'crthecodekitchen.azurecr.io'
          identity: 'system-environment'
        }
      ]
      identitySettings: []
      runtime: {
        dotnet: {
          autoConfigureDataProtection: false
        }
      }
      maxInactiveRevisions: 100
    }
    template: {
      containers: [
        {
          image: 'crthecodekitchen.azurecr.io/ca-tck-orleans-silo:138'
          imageType: 'ContainerImage'
          name: 'ca-tck-orleans-silo'
          env: [
            {
              name: 'ConnectionStrings__AzureStorage'
              secretRef: 'connection-strings--azure-storage'
            }
            {
              name: 'ConnectionStrings__EventHubNamespace'
              secretRef: 'connection-strings--event-hub-namespace'
            }
            {
              name: 'ConnectionStrings__AzureSignalR'
              secretRef: 'connection-strings--azure-signal-r'
            }
          ]
          resources: {
            cpu: json('0.25')
            memory: '0.5Gi'
          }
          probes: []
        }
      ]
      scale: {
        minReplicas: 1
        maxReplicas: 10
        cooldownPeriod: 300
        pollingInterval: 30
        rules: [
          {
            name: 'cpu-scaler'
            custom: {
              type: 'cpu'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'memory-scaler'
            custom: {
              type: 'memory'
              metadata: {
                type: 'Utilization'
                value: '60'
              }
            }
          }
          {
            name: 'grain-count-scaler'
            custom: {
              type: 'external'
              metadata: {
                AverageGrainCountPerSilo: '750'
                SiloNameFilter: 'ca-tck-orleans-silo'
                scalerAddress: 'ca-tck-orleans-scaler.internal.proudbeach-fbb36fdd.westeurope.azurecontainerapps.io:80'
              }
            }
          }
        ]
      }
      volumes: []
    }
  }
}

resource crthecodekitchen_repositories_admin 'Microsoft.ContainerRegistry/registries/scopeMaps@2025-05-01-preview' = {
  parent: crthecodekitchen
  name: '_repositories_admin'
  properties: {
    description: 'Can perform all read, write and delete operations on the registry'
    actions: [
      'repositories/*/metadata/read'
      'repositories/*/metadata/write'
      'repositories/*/content/read'
      'repositories/*/content/write'
      'repositories/*/content/delete'
    ]
  }
}

resource crthecodekitchen_repositories_pull 'Microsoft.ContainerRegistry/registries/scopeMaps@2025-05-01-preview' = {
  parent: crthecodekitchen
  name: '_repositories_pull'
  properties: {
    description: 'Can pull any repository of the registry'
    actions: [
      'repositories/*/content/read'
    ]
  }
}

resource crthecodekitchen_repositories_pull_metadata_read 'Microsoft.ContainerRegistry/registries/scopeMaps@2025-05-01-preview' = {
  parent: crthecodekitchen
  name: '_repositories_pull_metadata_read'
  properties: {
    description: 'Can perform all read operations on the registry'
    actions: [
      'repositories/*/content/read'
      'repositories/*/metadata/read'
    ]
  }
}

resource crthecodekitchen_repositories_push 'Microsoft.ContainerRegistry/registries/scopeMaps@2025-05-01-preview' = {
  parent: crthecodekitchen
  name: '_repositories_push'
  properties: {
    description: 'Can push to any repository of the registry'
    actions: [
      'repositories/*/content/read'
      'repositories/*/content/write'
    ]
  }
}

resource crthecodekitchen_repositories_push_metadata_write 'Microsoft.ContainerRegistry/registries/scopeMaps@2025-05-01-preview' = {
  parent: crthecodekitchen
  name: '_repositories_push_metadata_write'
  properties: {
    description: 'Can perform all read and write operations on the registry'
    actions: [
      'repositories/*/metadata/read'
      'repositories/*/metadata/write'
      'repositories/*/content/read'
      'repositories/*/content/write'
    ]
  }
}

resource evhns_the_code_kitchen_RootManageSharedAccessKey 'Microsoft.EventHub/namespaces/authorizationrules@2024-05-01-preview' = {
  parent: evhns_the_code_kitchen
  name: 'RootManageSharedAccessKey'
  location: 'westeurope'
  properties: {
    rights: [
      'Listen'
      'Manage'
      'Send'
    ]
  }
}

resource evhns_the_code_kitchen_evh_the_code_kitchen 'Microsoft.EventHub/namespaces/eventhubs@2024-05-01-preview' = {
  parent: evhns_the_code_kitchen
  name: 'evh-the-code-kitchen'
  location: 'westeurope'
  properties: {
    messageTimestampDescription: {
      timestampType: 'LogAppend'
    }
    retentionDescription: {
      cleanupPolicy: 'Delete'
      retentionTimeInHours: 1
    }
    messageRetentionInDays: 1
    partitionCount: 32
    status: 'Active'
  }
}

resource evhns_the_code_kitchen_default 'Microsoft.EventHub/namespaces/networkrulesets@2024-05-01-preview' = {
  parent: evhns_the_code_kitchen
  name: 'default'
  location: 'westeurope'
  properties: {
    publicNetworkAccess: 'Enabled'
    defaultAction: 'Allow'
    virtualNetworkRules: []
    ipRules: []
    trustedServiceAccessEnabled: false
  }
}

resource stthecodekitchen_default 'Microsoft.Storage/storageAccounts/blobServices@2025-01-01' = {
  parent: stthecodekitchen
  name: 'default'
  sku: {
    name: 'Standard_LRS'
    tier: 'Standard'
  }
  properties: {
    cors: {
      corsRules: []
    }
    deleteRetentionPolicy: {
      allowPermanentDelete: false
      enabled: true
      days: 7
    }
    containerDeleteRetentionPolicy: {
      enabled: true
      days: 7
    }
  }
}

resource Microsoft_Storage_storageAccounts_fileServices_stthecodekitchen_default 'Microsoft.Storage/storageAccounts/fileServices@2025-01-01' = {
  parent: stthecodekitchen
  name: 'default'
  sku: {
    name: 'Standard_LRS'
    tier: 'Standard'
  }
  properties: {
    protocolSettings: {
      smb: {}
    }
    cors: {
      corsRules: []
    }
    shareDeleteRetentionPolicy: {
      enabled: true
      days: 7
    }
  }
}

resource Microsoft_Storage_storageAccounts_queueServices_stthecodekitchen_default 'Microsoft.Storage/storageAccounts/queueServices@2025-01-01' = {
  parent: stthecodekitchen
  name: 'default'
  properties: {
    cors: {
      corsRules: []
    }
  }
}

resource Microsoft_Storage_storageAccounts_tableServices_stthecodekitchen_default 'Microsoft.Storage/storageAccounts/tableServices@2025-01-01' = {
  parent: stthecodekitchen
  name: 'default'
  properties: {
    cors: {
      corsRules: []
    }
  }
}

resource evhns_the_code_kitchen_evh_the_code_kitchen_Default 'Microsoft.EventHub/namespaces/eventhubs/consumergroups@2024-05-01-preview' = {
  parent: evhns_the_code_kitchen_evh_the_code_kitchen
  name: '$Default'
  location: 'westeurope'
  properties: {}
  dependsOn: [
    evhns_the_code_kitchen
  ]
}

resource stthecodekitchen_default_the_code_kitchen 'Microsoft.Storage/storageAccounts/blobServices/containers@2025-01-01' = {
  parent: stthecodekitchen_default
  name: 'the-code-kitchen'
  properties: {
    immutableStorageWithVersioning: {
      enabled: false
    }
    defaultEncryptionScope: '$account-encryption-key'
    denyEncryptionScopeOverride: false
    publicAccess: 'None'
  }
  dependsOn: [
    stthecodekitchen
  ]
}

resource stthecodekitchen_default_PubSubStore 'Microsoft.Storage/storageAccounts/tableServices/tables@2025-01-01' = {
  parent: Microsoft_Storage_storageAccounts_tableServices_stthecodekitchen_default
  name: 'PubSubStore'
  properties: {}
  dependsOn: [
    stthecodekitchen
  ]
}

resource stthecodekitchen_default_TheCodeKitchenClustering 'Microsoft.Storage/storageAccounts/tableServices/tables@2025-01-01' = {
  parent: Microsoft_Storage_storageAccounts_tableServices_stthecodekitchen_default
  name: 'TheCodeKitchenClustering'
  properties: {}
  dependsOn: [
    stthecodekitchen
  ]
}

resource stthecodekitchen_default_TheCodeKitchenEventHubCheckpoints 'Microsoft.Storage/storageAccounts/tableServices/tables@2025-01-01' = {
  parent: Microsoft_Storage_storageAccounts_tableServices_stthecodekitchen_default
  name: 'TheCodeKitchenEventHubCheckpoints'
  properties: {}
  dependsOn: [
    stthecodekitchen
  ]
}

resource stthecodekitchen_default_TheCodeKitchenReminders 'Microsoft.Storage/storageAccounts/tableServices/tables@2025-01-01' = {
  parent: Microsoft_Storage_storageAccounts_tableServices_stthecodekitchen_default
  name: 'TheCodeKitchenReminders'
  properties: {}
  dependsOn: [
    stthecodekitchen
  ]
}
